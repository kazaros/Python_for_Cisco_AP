#пингует точку перед ребутом. Если нет пинга, то пишет на почту. Если есть пинг, то подключается и шлет reload. Некоторые точки требуют два Enter,
#некоторые пропадают сразу и выдают ошибку - для них сделал except:
#также шлёт логи на лог-сервер
#в конце цикла еще раз пингует точку и алармит, если пинг не пропал
#
#надо решить:
#3. логин/пароль в открытом виде в скрипте (скорее всего устраню после подключения NORNIR-а по аналогии с ансиблом  Vault)
#4. масштабирование -  для упрощения сверки-поделить общий список на списки сайтов - помеха, что разные пароли разных сайтов (скорее всего устраню после подключения NORNIR)

import paramiko 
import time
import logging
import logging.handlers
import os
import smtplib

msg = "\r\n".join((
    "From: mail@mail",
    "To: mail@mail",
    "Subject: AP reboot script - AP unavailable" ,
    "",
    "AP "
))

user = 'admin'
pass1 = '11111111'
port = 22


XXX = ['192.168.0.1', '192.168.0.2', '192.168.0.3']

for host in XXX:
   response = os.system("ping -c 2 " + host)
   if response == 0:
      try:
          client = paramiko.SSHClient()
          client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          client.connect(hostname=host, username=user, password=pass1, port=port)
          chan = client.invoke_shell()
          time.sleep(2)
          chan.send("reboot\n")
          time.sleep(2)
          chan.send("\n")
          time.sleep(4)
          output = chan.recv(99999)
          my_logger = logging.getLogger('MyLogger')
          my_logger.setLevel(logging.DEBUG)
          handler = logging.handlers.SysLogHandler(address = ('192.168.0.9',514))
          my_logger.addHandler(handler)
          my_logger.debug(host + " - AP command reboot send")
          if (my_logger.hasHandlers()):
              my_logger.handlers.clear()
          print (host + " reboot send")
          print (output)
          client.close()
      except:
#use except - most likely the point of version 4.3 and becomes unavailable immediately after the reboot command
#          print(host + " reboot send use exempt - point another version")
#          my_logger = logging.getLogger('MyLogger')
#          my_logger.setLevel(logging.DEBUG)
#          handler = logging.handlers.SysLogHandler(address = ('192.168.0.9',514))
#          my_logger.addHandler(handler)
#          my_logger.debug(host + " - AP command reboot send use exempt - point another version")
#          if (my_logger.hasHandlers()):
#              my_logger.handlers.clear()
          pass
   else:
      print(host + " unavailable")
      print(host, 'is down!')
      smtpObj = smtplib.SMTP('mail@mail')
      smtpObj.sendmail('mail@mail',['mail@mail'],msg + host + "  unavailable  - script cannot restart the access point because it is not available. Check WLC, zabbix, hosts in this scipt.")
      smtpObj.quit()
      my_logger = logging.getLogger('MyLogger')
      my_logger.setLevel(logging.DEBUG)
      handler = logging.handlers.SysLogHandler(address = ('192.168.0.9',514))
      my_logger.addHandler(handler)
      my_logger.debug(host + " AP unavailable  - script cannot restart the access point because it is not available. Check WLC, zabbix, hosts in this scipt.")
      if (my_logger.hasHandlers()):
          my_logger.handlers.clear()
#в конце цикла еще раз пингует точку и алармит, если пинг не пропал          
   time.sleep(5)
   response = os.system("ping -c 2 " + host)
   if response == 0:
      print(host + " - script can not reboot AP - check this host in WLC")
      smtpObj = smtplib.SMTP('mmail@mail.ru')
      smtpObj.sendmail('alert@info.local',['mail@mail.ru'],msg + host + "  script not want reboot - check this host in WLC.")
      smtpObj.quit()
#   else:
#      print(host + " unavailable after work script - All OK")

          
